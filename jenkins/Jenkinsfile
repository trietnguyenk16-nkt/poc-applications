pipeline {
    agent any
    triggers {
       githubPush()
    }
    stages {
        stage("Source Code Management")  {
          steps {
             git branch: 'main', credentialsId: 'be3be417-57b4-4b8b-81fd-5cb082607f61', url: 'https://github.com/trietnguyenk16-nkt/poc-applications.git'
	      //checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'be3be417-57b4-4b8b-81fd-5cb082607f61', url: 'https://github.com/trietnguyenk16-nkt/django-poc.git']])
          }
        }
        stage("Installed libraries") {
            steps { 
		    sh "whoami"
		    sh "sqlite3 --version"
		    sh "python3.8 -m venv jenkinsenv"
		    script {
			    if (fileExists('requirements.txt')) {
	    			sh """
	    				source jenkinsenv/bin/activate
	    				pip3.8 install -r requirements.txt
	    				source jenkinsenv/bin/activate
	 				pip3.8 list
	    				python3.8 manage.py makemigrations
	       				python3.8 manage.py migrate
		   			
	    			"""
			    } else {
				    echo "requirements.txt is not exist"
			    }
		    }
            }
        }
	stage("Run unit test") {
	   steps {
		sh """
    			source jenkinsenv/bin/activate
    			python3.8 manage.py test tests
    		"""
	   }
	}
	stage("Build Django App") {
	   steps {
		sh """
  			source jenkinsenv/bin/activate
     		sudo \\cp -R portal /var/lib/jenkins/workspace/django-poc
			cd /var/lib/jenkins/workspace/django-poc
   			python3.8 setup.py sdist
    		"""
	   }
	}
	stage("Deploy to Dev Environment") {
		steps {
			sh """
   				cd /var/lib/jenkins/workspace/django-poc
   				cd dist
	 			sudo \\cp `ls -t *.tar.gz| head -1` /home/django-test
       			python3.8 -m pip install --user /home/django-test/`ls -t *.tar.gz| head -1`
	  			cd /var/lib/jenkins/.local/lib/python3.8/site-packages
     			sudo \\cp -R portal /home/my_django_app/django-poc
   		 	"""
			sh """
			    cd /home/my_django_app/django-poc
   				source venv/bin/activate
       			python3.8 manage.py makemigrations
	       		python3.8 manage.py migrate
	   			sudo systemctl stop nginx
	   			sudo systemctl restart gunicorn.socket
       			sudo systemctl start nginx
   			"""
		}
	}
	stage("Integration test") {
		steps {
			echo "Integration test"
		}
	}
	stage("Publish Artifact") {
		steps {
		    sh """
		        cd /var/lib/jenkins/workspace/django-poc
		        cd dist
		        sudo \\cp `ls -t *.tar.gz| head -1` /var/lib/jenkins/workspace/poc-pipeline
		    """
		    archiveArtifacts artifacts: '*.tar.gz', followSymlinks: false, onlyIfSuccessful: true
		    sh """ 
		        cd /var/lib/jenkins/workspace/poc-pipeline
		        sudo rm -f `ls -t *.tar.gz| head -1`
		    """
		    sh """
   			cd ${env.JENKINS_HOME}/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}/archive
			sudo \\mv `ls -t *.tar.gz| head -1` /home/artifactory
   		    """
		}
	}
	stage("Build Management and Deploy to Q Env") {
            steps {
                build quietPeriod: 3, job: 'poc-pipeline-2', parameters: [string(name: 'VERSION', value: '20230813.255')]
            }
	}
    }
    post {
	always {
	        emailext body: '$DEFAULT_CONTENT', 
	        recipientProviders: [
	        	[$class: 'CulpritsRecipientProvider'],
	        	[$class: 'DevelopersRecipientProvider'],
	        	[$class: 'RequesterRecipientProvider']
	        ], 
	        replyTo: '$DEFAULT_REPLYTO', 
	        subject: '$DEFAULT_SUBJECT',
	        to: '$DEFAULT_RECIPIENTS'
		}
	}
}
// Note:
// Auto trigger when new commit not implemented
// Add steps to check pass fail (fail send noti, pass continue)
// in stage building django app, Consider to move django-poc out of workspace/GithubPipeline because we can deleteDir after finish or consider to creatte new django-poc with neccessary files each time running the pipeline
// in stage building django app, should investigate how to dynmaic variable of the version (django-poc-xxxx.tar.gz)
// currently home/django-test is only test folder for unpackaging django app, after testing will delete and use /home/my-django-app/django-poc
// find the way not to use venv
// can create shell file to contains all shell command, this jenkinsfile will import that shell file.
// check if can use y (overwrite copy) in build django app, if not we need to create new version of packaging each team we package
// in stage Deploy to Dev Environment, check if we need to pip install -r requirements.txt or not
// Archive file only archive any file in the JENKINS WORKSPACE
